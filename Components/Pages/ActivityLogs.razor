@page "/activity-logs"
@rendermode InteractiveServer
@using TestApp.Models
@using TestApp.Services
@inject ActivityLogService ActivityLogService
@inject UserService UserService

<PageTitle>Activity Logs</PageTitle>

<h1>User Activity Logs</h1>

@if (!UserService.HasPermission(Permission.ViewActivityLogs))
{
    <div class="alert alert-warning">
        <i class="bi bi-exclamation-triangle me-2"></i>
        You don't have permission to view activity logs.
    </div>
}
else
{
    <!-- Filters Section -->
    <div class="row mb-3">
        <div class="col-12">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row g-3">
                        <!-- Search -->
                        <div class="col-lg-4 col-md-6">
                            <label class="form-label">Search</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-search"></i>
                                </span>
                                <input type="text" class="form-control" placeholder="Search actions, users, or descriptions..." 
                                       @bind="searchTerm" @bind:event="oninput" />
                            </div>
                        </div>

                        <!-- Action Filter -->
                        <div class="col-lg-2 col-md-6">
                            <label class="form-label">Action</label>
                            <select class="form-select" @bind="actionFilter" @bind:event="onchange">
                                <option value="">All Actions</option>
                                @if (availableActions != null)
                                {
                                    @foreach (var action in availableActions)
                                    {
                                        <option value="@action">@action</option>
                                    }
                                }
                            </select>
                        </div>

                        <!-- User Filter -->
                        <div class="col-lg-2 col-md-6">
                            <label class="form-label">User</label>
                            <select class="form-select" @bind="userFilter" @bind:event="onchange">
                                <option value="">All Users</option>
                                @if (availableUsers != null)
                                {
                                    @foreach (var user in availableUsers)
                                    {
                                        <option value="@user">@user</option>
                                    }
                                }
                            </select>
                        </div>

                        <!-- Date From -->
                        <div class="col-lg-2 col-md-6">
                            <label class="form-label">From Date</label>
                            <input type="date" class="form-control" @bind="dateFrom" @bind:event="onchange" />
                        </div>

                        <!-- Date To -->
                        <div class="col-lg-2 col-md-6">
                            <label class="form-label">To Date</label>
                            <input type="date" class="form-control" @bind="dateTo" @bind:event="onchange" />
                        </div>
                    </div>

                    <!-- Filter Actions -->
                    <div class="row mt-3">
                        <div class="col-12">
                            <div class="d-flex gap-2 flex-wrap">
                                <button class="btn btn-primary btn-sm" @onclick="ApplyFiltersAsync">
                                    <i class="bi bi-funnel"></i> Apply Filters
                                </button>
                                <button class="btn btn-outline-secondary btn-sm" @onclick="ClearFiltersAsync">
                                    <i class="bi bi-x-circle"></i> Clear Filters
                                </button>
                                <button class="btn btn-outline-info btn-sm" @onclick="ExportLogsAsync">
                                    <i class="bi bi-download"></i> Export Logs
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Activity Logs Table -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-clock-history me-2"></i>
                        Activity Logs
                        @if (pagedLogs != null)
                        {
                            <span class="badge bg-primary ms-2">@pagedLogs.TotalCount total</span>
                        }
                    </h5>
                    
                    @if (pagedLogs != null)
                    {
                        <div class="d-flex align-items-center gap-2">
                            <span class="text-muted">Page @pagedLogs.PageNumber of @pagedLogs.TotalPages</span>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-secondary" @onclick="() => ChangePageAsync(pagedLogs.PageNumber - 1)" 
                                        disabled="@(pagedLogs.PageNumber <= 1)">
                                    <i class="bi bi-chevron-left"></i>
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="() => ChangePageAsync(pagedLogs.PageNumber + 1)" 
                                        disabled="@(pagedLogs.PageNumber >= pagedLogs.TotalPages)">
                                    <i class="bi bi-chevron-right"></i>
                                </button>
                            </div>
                        </div>
                    }
                </div>

                <div class="card-body p-0">
                    @if (isLoading)
                    {
                        <div class="text-center p-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2 text-muted">Loading activity logs...</p>
                        </div>
                    }
                    else if (pagedLogs?.Items?.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th width="5%">Icon</th>
                                        <th width="15%">Action</th>
                                        <th width="25%">Description</th>
                                        <th width="12%">User</th>
                                        <th width="10%">Role</th>
                                        <th width="15%">Timestamp</th>
                                        <th width="10%">Entity</th>
                                        <th width="8%">Details</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var log in pagedLogs.Items)
                                    {
                                        <tr>
                                            <td class="text-center">
                                                <i class="@log.ActionIcon @log.ActionColor fs-5"></i>
                                            </td>
                                            <td>
                                                <span class="fw-semibold @log.ActionColor">@log.Action</span>
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(log.Description))
                                                {
                                                    <span title="@log.Description">@log.Description</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                <span class="fw-medium">@log.UserName</span>
                                            </td>
                                            <td>
                                                <span class="badge bg-secondary">@log.UserRole</span>
                                            </td>
                                            <td>
                                                <span class="text-muted">@log.FormattedTimestamp</span>
                                                @if (!string.IsNullOrEmpty(log.IpAddress))
                                                {
                                                    <br><small class="text-muted">@log.IpAddress</small>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(log.EntityType))
                                                {
                                                    <span class="badge bg-info">@log.EntityType</span>
                                                    @if (log.EntityId.HasValue)
                                                    {
                                                        <br><small class="text-muted">#@log.EntityId</small>
                                                    }
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(log.Details))
                                                {
                                                    <button class="btn btn-sm btn-outline-info" @onclick="() => ShowDetails(log.Details)" title="View Details">
                                                        <i class="bi bi-info-circle"></i>
                                                    </button>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center p-4">
                            <i class="bi bi-inbox display-1 text-muted"></i>
                            <h5 class="mt-3 text-muted">No activity logs found</h5>
                            <p class="text-muted">No activity logs match your current filters.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Details Modal -->
    @if (showDetailsModal)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="bi bi-info-circle me-2"></i>
                            Activity Details
                        </h5>
                        <button type="button" class="btn-close" @onclick="() => showDetailsModal = false"></button>
                    </div>
                    <div class="modal-body">
                        <pre class="bg-light p-3 rounded">@selectedDetails</pre>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showDetailsModal = false">Close</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
}

@code {
    private PagedResult<ActivityLog>? pagedLogs;
    private bool isLoading = true;
    private int currentPage = 1;
    private int pageSize = 20;

    // Filter properties
    private string searchTerm = string.Empty;
    private string actionFilter = string.Empty;
    private string userFilter = string.Empty;
    private DateTime? dateFrom;
    private DateTime? dateTo;

    // Available options for filters
    private List<string>? availableActions;
    private List<string>? availableUsers;

    // Details modal
    private bool showDetailsModal = false;
    private string selectedDetails = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadFilterOptionsAsync();
        await LoadActivityLogsAsync();
    }

    private async Task LoadFilterOptionsAsync()
    {
        try
        {
            availableActions = await ActivityLogService.GetDistinctActionsAsync();
            availableUsers = await ActivityLogService.GetDistinctUsersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading filter options: {ex.Message}");
        }
    }

    private async Task LoadActivityLogsAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            pagedLogs = await ActivityLogService.GetActivityLogsPagedAsync(
                page: currentPage,
                pageSize: pageSize,
                searchTerm: string.IsNullOrEmpty(searchTerm) ? null : searchTerm,
                actionFilter: string.IsNullOrEmpty(actionFilter) ? null : actionFilter,
                userFilter: string.IsNullOrEmpty(userFilter) ? null : userFilter,
                dateFrom: dateFrom,
                dateTo: dateTo
            );
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading activity logs: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ApplyFiltersAsync()
    {
        currentPage = 1;
        await LoadActivityLogsAsync();
    }

    private async Task ClearFiltersAsync()
    {
        searchTerm = string.Empty;
        actionFilter = string.Empty;
        userFilter = string.Empty;
        dateFrom = null;
        dateTo = null;
        currentPage = 1;
        await LoadActivityLogsAsync();
    }

    private async Task ChangePageAsync(int page)
    {
        if (page >= 1 && (pagedLogs == null || page <= pagedLogs.TotalPages))
        {
            currentPage = page;
            await LoadActivityLogsAsync();
        }
    }

    private void ShowDetails(string details)
    {
        selectedDetails = details;
        showDetailsModal = true;
    }

    private async Task ExportLogsAsync()
    {
        try
        {
            // This would export the current filtered logs
            // For now, just show a message
            Console.WriteLine("Export functionality would be implemented here");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting logs: {ex.Message}");
        }
    }
}
