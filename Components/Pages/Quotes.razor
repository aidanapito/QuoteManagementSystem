@page "/quotes"
@rendermode InteractiveServer
@using TestApp.Models
@using TestApp.Services
@using Microsoft.JSInterop
@inject QuoteService QuoteService
@inject IJSRuntime JSRuntime

<PageTitle>Quotes</PageTitle>

<h1>Quote Management</h1>

<div class="row mb-3">
    <div class="col-md-8">
        <div class="input-group">
            <span class="input-group-text">
                <i class="bi bi-search"></i>
            </span>
            <input type="text" class="form-control" placeholder="Search by customer, product, or status..." 
                   @bind="SearchTerm" @bind:event="oninput" />
            @if (!string.IsNullOrEmpty(searchTerm))
            {
                <button class="btn btn-outline-danger" type="button" @onclick="ClearSearch" title="Clear search">
                    <i class="bi bi-x-circle-fill"></i> Clear
                </button>
            }
        </div>
    </div>
    <div class="col-md-4 text-end">
        <button class="btn btn-success" @onclick="BeginAddNew" disabled="@(isAddingNew || editingId.HasValue)">
            <i class="bi bi-plus-circle"></i> Add New Quote
        </button>
    </div>
</div>

@if (isAddingNew)
{
    <div class="row mb-3">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>Add New Quote</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Customer Name</label>
                            <input class="form-control @(IsNewCustomerNameValid() ? "" : "is-invalid")" @bind="newQuote!.CustomerName" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Product Name</label>
                            <input class="form-control @(IsNewProductNameValid() ? "" : "is-invalid")" @bind="newQuote!.ProductName" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Unit Price</label>
                            <input type="number" step="0.01" class="form-control @(IsNewUnitPriceValid() ? "" : "is-invalid")" @bind="newQuote!.UnitPrice" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Quantity</label>
                            <input type="number" class="form-control @(IsNewQuantityValid() ? "" : "is-invalid")" @bind="newQuote!.Quantity" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" @bind="newQuote!.Status">
                                <option>Draft</option>
                                <option>Pending</option>
                                <option>Approved</option>
                                <option>Rejected</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Total Price</label>
                            <input class="form-control" value="@((newQuote!.UnitPrice * newQuote!.Quantity).ToString("C"))" readonly />
                        </div>
                    </div>
                    <div class="mt-3">
                        <button class="btn btn-primary me-2" @onclick="SaveNewQuote" disabled="@(!IsNewFormValid())">Save</button>
                        <button class="btn btn-secondary" @onclick="CancelAddNew">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<div class="row">
    <div class="col-12">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Customer</th>
                    <th>Product</th>
                    <th>Unit Price</th>
                    <th>Quantity</th>
                    <th>Total</th>
                    <th>Status</th>
                    <th>Created</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Quote quote in filteredQuotes)
                {
                    <tr>
                        @if (editingId == quote.Id)
                        {
                            <td>@quote.Id</td>
                            <td> <input class="form-control @(IsCustomerNameValid() ? "" : "is-invalid")" @bind="draft!.CustomerName" /> </td>
                            <td> <input class="form-control @(IsProductNameValid() ? "" : "is-invalid")" @bind="draft!.ProductName" /> </td>
                            <td> <input type="number" step="0.01" class="form-control @(IsUnitPriceValid() ? "" : "is-invalid")" @bind="draft!.UnitPrice" /> </td>
                            <td> <input type="number" class="form-control @(IsQuantityValid() ? "" : "is-invalid")" @bind="draft!.Quantity" /> </td>

                            <td>@((draft!.UnitPrice * draft!.Quantity).ToString("C"))</td> // generate total price 

                            <td>
                                <select class="form-select" @bind="draft!.Status">
                                    <option>Draft</option>
                                    <option>Pending</option>
                                    <option>Approved</option>
                                    <option>Rejected</option>
                                </select>
                            </td>
                            <td>@quote.CreatedDate.ToString("MM/dd/yyyy")</td>
                            <td>
                                <button class="btn btn-sm btn-primary me-2" @onclick="SaveEdit" disabled="@(!IsFormValid())">Save</button>
                                <button class="btn btn-sm btn-secondary" @onclick="CancelEdit">Cancel</button>
                            </td>
                        }
                        else
                        {
                            <td>@quote.Id</td>
                            <td>@quote.CustomerName</td>
                            <td>@quote.ProductName</td>
                            <td>@quote.UnitPrice.ToString("C")</td>
                            <td>@quote.Quantity</td>
                            <td>@quote.TotalPrice.ToString("C")</td>
                            <td>@quote.Status</td>
                            <td>@quote.CreatedDate.ToString("MM/dd/yyyy")</td>
                            <td>
                                <!-- TODO: Add Edit and Delete buttons -->
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => BeginEdit(quote)"> Edit</button>
                                <button class="btn btn-sm btn-outline-danger ms-2" @onclick="() => ConfirmDelete(quote.Id, quote.CustomerName)">Delete</button>
                            </td>
                            
                        }

                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<Quote> quotes = new List<Quote>();
    private int? editingId;
    private Quote? draft;
    private bool isAddingNew = false;
    private Quote? newQuote;
    private string searchTerm = "";
    private List<Quote> filteredQuotes = new List<Quote>();

    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            searchTerm = value;
            FilterQuotes();
        }
    }

    protected override void OnInitialized()
    {
        quotes = QuoteService.GetAllQuotes();
        FilterQuotes();
    }

    private void FilterQuotes()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredQuotes = quotes.ToList();
        }
        else
        {
            var term = searchTerm.ToLowerInvariant();
            filteredQuotes = quotes.Where(q => 
                q.CustomerName.ToLowerInvariant().Contains(term) ||
                q.ProductName.ToLowerInvariant().Contains(term) ||
                q.Status.ToLowerInvariant().Contains(term)
            ).ToList();
        }
    }

    private void ClearSearch()
    {
        searchTerm = "";
        FilterQuotes();
    }

    private void BeginEdit(Quote quote)
    {
        editingId = quote.Id;
        draft = new Quote
            {
                Id = quote.Id,
                CustomerName = quote.CustomerName,
                ProductName = quote.ProductName,
                UnitPrice = quote.UnitPrice,
                Quantity = quote.Quantity,
                CreatedDate = quote.CreatedDate,
                Status = quote.Status
            };
    }

    private void CancelEdit()
    {
        //cancel = null
        editingId = null;
        draft = null;
    }

    private void SaveEdit()
    {
        if (editingId is null || draft is null) return;

        // Validate numeric fields
        if (!IsValidNumericFields())
        {
            return; // Don't save if validation fails
        }

        // Persist changes using the service
        QuoteService.UpdateQuote(draft);
        
        // Refresh the local quotes list to reflect changes
        quotes = QuoteService.GetAllQuotes();
        FilterQuotes();

        CancelEdit();
    }

    private bool IsValidNumericFields()
    {
        if (draft == null) return false;

        // Check if UnitPrice is valid (greater than 0)
        if (draft.UnitPrice <= 0)
        {
            return false;
        }

        // Check if Quantity is valid (greater than 0 and whole number)
        if (draft.Quantity <= 0 || draft.Quantity % 1 != 0)
        {
            return false;
        }

        return true;
    }

    private bool IsUnitPriceValid()
    {
        return draft != null && draft.UnitPrice > 0;
    }

    private bool IsQuantityValid()
    {
        return draft != null && draft.Quantity > 0 && draft.Quantity % 1 == 0;
    }

    private bool IsFormValid()
    {
        return IsUnitPriceValid() && IsQuantityValid() && IsStringFieldsValid();
    }

    private bool IsCustomerNameValid()
    {
        return draft != null && !string.IsNullOrWhiteSpace(draft.CustomerName);
    }

    private bool IsProductNameValid()
    {
        return draft != null && !string.IsNullOrWhiteSpace(draft.ProductName);
    }

    private bool IsStringFieldsValid()
    {
        return IsCustomerNameValid() && IsProductNameValid();
    }

    private async Task ConfirmDelete(int id, string customerName)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to delete the quote for {customerName}? This action cannot be undone.");
        
        if (confirmed)
        {
            DeleteQuote(id);
        }
    }

    private void DeleteQuote(int id)
    {
        // Delete from service
        QuoteService.DeleteQuote(id);
        
        // Refresh the local quotes list to reflect changes
        quotes = QuoteService.GetAllQuotes();
        FilterQuotes();
        
        // If we were editing this quote, cancel edit mode
        if (editingId == id)
        {
            CancelEdit();
        }
    }

    private void BeginAddNew()
    {
        isAddingNew = true;
        newQuote = new Quote
        {
            CustomerName = "",
            ProductName = "",
            UnitPrice = 0,
            Quantity = 0,
            Status = "Draft"
        };
    }

    private void CancelAddNew()
    {
        isAddingNew = false;
        newQuote = null;
    }

    private void SaveNewQuote()
    {
        if (newQuote == null || !IsNewFormValid()) return;

        QuoteService.AddQuote(newQuote);
        quotes = QuoteService.GetAllQuotes();
        FilterQuotes();
        CancelAddNew();
    }

    // Validation methods for new quote form
    private bool IsNewCustomerNameValid()
    {
        return newQuote != null && !string.IsNullOrWhiteSpace(newQuote.CustomerName);
    }

    private bool IsNewProductNameValid()
    {
        return newQuote != null && !string.IsNullOrWhiteSpace(newQuote.ProductName);
    }

    private bool IsNewUnitPriceValid()
    {
        return newQuote != null && newQuote.UnitPrice > 0;
    }

    private bool IsNewQuantityValid()
    {
        return newQuote != null && newQuote.Quantity > 0 && newQuote.Quantity % 1 == 0;
    }

    private bool IsNewFormValid()
    {
        return IsNewCustomerNameValid() && IsNewProductNameValid() && 
               IsNewUnitPriceValid() && IsNewQuantityValid();
    }
}