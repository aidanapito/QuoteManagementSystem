@page "/quotes"
@rendermode InteractiveServer
@using TestApp.Models
@using TestApp.Services
@using Microsoft.AspNetCore.Components.Forms
@using System.Text
@inject QuoteService QuoteService
@inject IJSRuntime JSRuntime

<PageTitle>Quotes</PageTitle>

<h1>Quote Management</h1>

<!-- Search and Filter Section -->
<div class="row mb-3">
    <div class="col-12">
        <div class="card">
            <div class="card-body p-3">
                <!-- Search Row -->
                <div class="row mb-3">
                    <div class="col-lg-8 col-md-12 mb-2">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="bi bi-search"></i>
                            </span>
                            <input type="text" class="form-control" placeholder="Search by customer, product, or status..." 
                                   @bind="SearchTerm" @bind:event="oninput" />
                            @if (!string.IsNullOrEmpty(SearchTerm))
                            {
                                <button class="btn btn-outline-danger" type="button" @onclick="ClearSearchAsync" title="Clear search">
                                    <i class="bi bi-x-circle-fill"></i> <span class="d-none d-sm-inline">Clear</span>
                                </button>
                            }
                        </div>
                    </div>
                    <div class="col-lg-4 col-md-12">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="bi bi-sort-down"></i>
                            </span>
                            <select class="form-select" @bind="SortBy" @bind:event="onchange">
                                <option value="id-asc">ID (Low to High)</option>
                                <option value="id-desc">ID (High to Low)</option>
                                <option value="date-desc">Date (Newest First)</option>
                                <option value="date-asc">Date (Oldest First)</option>
                                <option value="customer-asc">Customer (A-Z)</option>
                                <option value="customer-desc">Customer (Z-A)</option>
                                <option value="product-asc">Product (A-Z)</option>
                                <option value="product-desc">Product (Z-A)</option>
                                <option value="total-desc">Total (High to Low)</option>
                                <option value="total-asc">Total (Low to High)</option>
                                <option value="status-asc">Status (A-Z)</option>
                                <option value="status-desc">Status (Z-A)</option>
                                <option value="valid-desc">Valid Until (Latest First)</option>
                                <option value="valid-asc">Valid Until (Earliest First)</option>
                            </select>
                        </div>
                    </div>
                </div>
                
                <!-- Action Buttons Row -->
                <div class="row">
                    <div class="col-12">
                        <div class="d-flex flex-wrap gap-2 justify-content-between align-items-center">
                            <!-- Left side - Filter button -->
                            <div class="d-flex gap-2">
                                <button class="btn btn-outline-secondary btn-sm" @onclick="ToggleAdvancedFilters" title="Advanced Filters">
                                    <i class="bi bi-funnel"></i> 
                                    <span class="d-none d-sm-inline ms-1">Filters</span>
                                </button>
                            </div>
                            
                            <!-- Right side - Action buttons -->
                            <div class="d-flex gap-2 flex-wrap">
                                <button class="btn btn-outline-info btn-sm" @onclick="ExportToCsvAsync" title="Export to CSV">
                                    <i class="bi bi-download"></i> 
                                    <span class="d-none d-sm-inline ms-1">Export</span>
                                </button>
                                <button class="btn btn-outline-warning btn-sm" @onclick="TriggerFileInput" title="Import from CSV">
                                    <i class="bi bi-upload"></i> 
                                    <span class="d-none d-sm-inline ms-1">Import</span>
                                </button>
                                <button class="btn btn-success btn-sm" @onclick="BeginAddNew" disabled="@(isAddingNew || editingId.HasValue)">
                                    <i class="bi bi-plus-circle"></i> 
                                    <span class="d-none d-sm-inline ms-1">Add Quote</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Hidden file input for CSV import -->
<input type="file" @ref="fileInputRef" @onchange="OnFileSelected" accept=".csv" style="display: none;" />

<!-- Bulk Action Bar -->
@if (selectedQuoteIds.Count > 0)
{
    <BulkActionBar SelectedCount="@selectedQuoteIds.Count"
                   OnClearSelection="@ClearSelection"
                   OnStatusUpdate="@BulkUpdateStatusAsync"
                   OnExport="@BulkExportAsync"
                   OnDelete="@BulkDeleteAsync"
                   OnPriceAdjustment="@BulkAdjustPricesAsync" />
}

<!-- Advanced Filters Panel -->
@if (showAdvancedFilters)
{
    <div class="row mb-3">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="mb-0"><i class="bi bi-funnel-fill"></i> Advanced Filters</h6>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="ClearAllFiltersAsync" title="Clear all filters">
                        <i class="bi bi-x-circle"></i> Clear All
                    </button>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Customer</label>
                            <select class="form-select" @bind="filter.Customer" @bind:event="onchange">
                                <option value="">All Customers</option>
                                @foreach (var customer in GetUniqueCustomers())
                                {
                                    <option value="@customer">@customer</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Product</label>
                            <select class="form-select" @bind="filter.Product" @bind:event="onchange">
                                <option value="">All Products</option>
                                @foreach (var product in GetUniqueProducts())
                                {
                                    <option value="@product">@product</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" @bind="filter.Status" @bind:event="onchange">
                                <option value="">All Statuses</option>
                                <option value="Draft">Draft</option>
                                <option value="Pending">Pending</option>
                                <option value="Approved">Approved</option>
                                <option value="Rejected">Rejected</option>
                            </select>
                        </div>
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Date Range</label>
                            <select class="form-select" @bind="filter.DateRangeFilter" @bind:event="onchange">
                                <option value="all">All Dates</option>
                                <option value="today">Today</option>
                                <option value="week">This Week</option>
                                <option value="month">This Month</option>
                                <option value="quarter">This Quarter</option>
                                <option value="year">This Year</option>
                                <option value="custom">Custom Range</option>
                            </select>
                        </div>
                    </div>
                    @if (filter.DateRangeFilter == "custom")
                    {
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">From Date</label>
                                <input type="date" class="form-control" @bind="filter.CustomStartDate" @bind:event="onchange" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">To Date</label>
                                <input type="date" class="form-control" @bind="filter.CustomEndDate" @bind:event="onchange" />
                            </div>
                        </div>
                    }
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Price Range</label>
                            <div class="row">
                                <div class="col-6">
                                    <input type="number" step="0.01" class="form-control" @bind="filter.MinPrice" @bind:event="oninput" placeholder="Min $" />
                                </div>
                                <div class="col-6">
                                    <input type="number" step="0.01" class="form-control" @bind="filter.MaxPrice" @bind:event="oninput" placeholder="Max $" />
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Quantity Range</label>
                            <div class="row">
                                <div class="col-6">
                                    <input type="number" class="form-control" @bind="filter.MinQuantity" @bind:event="oninput" placeholder="Min Qty" />
                                </div>
                                <div class="col-6">
                                    <input type="number" class="form-control" @bind="filter.MaxQuantity" @bind:event="oninput" placeholder="Max Qty" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-muted">
                                    Showing @pagedQuotes.Items.Count of @pagedQuotes.TotalCount quotes
                                    @if (HasActiveFilters())
                                    {
                                        <span class="badge bg-primary ms-2">Filtered</span>
                                    }
                                </small>
                                <button class="btn btn-primary btn-sm" @onclick="ApplyFiltersAsync">
                                    <i class="bi bi-search"></i> Apply Filters
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@if (isAddingNew)
{
    <div class="row mb-3">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>Add New Quote</h5>
                </div>
                <div class="card-body">
                    @if (!IsNewFormValid() && newQuote != null)
                    {
                        <div class="alert alert-warning" role="alert">
                            <h6 class="alert-heading"><i class="bi bi-exclamation-triangle"></i> Please fix the following issues:</h6>
                            <ul class="mb-0">
                                @if (!IsNewCustomerNameValid())
                                {
                                    <li>Customer name is required</li>
                                }
                                @if (!IsNewProductNameValid())
                                {
                                    <li>Product name is required</li>
                                }
                                @if (!IsNewUnitPriceValid())
                                {
                                    <li>Unit price must be a numeric value greater than $0.</li>
                                }
                                @if (!IsNewQuantityValid())
                                {
                                    <li>Quantity must be a whole number greater than 0</li>
                                }
                            </ul>
                        </div>
                    }
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Customer Name <span class="text-danger">*</span></label>
                            <input class="form-control @(IsNewCustomerNameValid() ? "" : "is-invalid")" @bind="newQuote!.CustomerName" placeholder="Enter customer name" />
                            @if (!IsNewCustomerNameValid() && newQuote != null)
                            {
                                <div class="invalid-feedback">
                                    Customer name is required and cannot be empty.
                                </div>
                            }
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Product Name <span class="text-danger">*</span></label>
                            <input class="form-control @(IsNewProductNameValid() ? "" : "is-invalid")" @bind="newQuote!.ProductName" placeholder="Enter product name" />
                            @if (!IsNewProductNameValid() && newQuote != null)
                            {
                                <div class="invalid-feedback">
                                    Product name is required and cannot be empty.
                                </div>
                            }
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Unit Price <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" step="0.01" min="0.01" class="form-control @(IsNewUnitPriceValid() ? "" : "is-invalid")" @bind="newQuote!.UnitPrice" placeholder="0.00" />
                            </div>
                            @if (!IsNewUnitPriceValid() && newQuote != null)
                            {
                                <div class="invalid-feedback">
                                    Unit price must be greater than $0.00.
                                </div>
                            }
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Quantity <span class="text-danger">*</span></label>
                            <input type="number" min="1" class="form-control @(IsNewQuantityValid() ? "" : "is-invalid")" @bind="newQuote!.Quantity" placeholder="1" />
                            @if (!IsNewQuantityValid() && newQuote != null)
                            {
                                <div class="invalid-feedback">
                                    Quantity must be a whole number greater than 0.
                                </div>
                            }
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" @bind="newQuote!.Status">
                                <option>Draft</option>
                                <option>Pending</option>
                                <option>Approved</option>
                                <option>Rejected</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Valid Until</label>
                            <input type="date" class="form-control" @bind="newQuote!.ValidQuotePeriod" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Total Price</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input class="form-control" value="@((newQuote!.UnitPrice * newQuote!.Quantity).ToString("F2"))" readonly />
                            </div>
                        </div>
                        <div class="col-12 mb-3">
                            <label class="form-label">Comments</label>
                            <textarea class="form-control" rows="3" @bind="newQuote!.Comments" placeholder="Add any notes, special instructions, or comments about this quote..."></textarea>
                        </div>
                    </div>
                    <div class="mt-3">
                        <button class="btn btn-primary me-2" @onclick="ShowNewQuoteConfirmation" disabled="@(!IsNewFormValid())">
                            <i class="bi bi-check-circle"></i> Save Quote
                        </button>
                        <button class="btn btn-secondary" @onclick="CancelAddNew">
                            <i class="bi bi-x-circle"></i> Cancel
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Desktop Table View -->
<div class="d-none d-lg-block">
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th style="width: 40px;">
                        <input type="checkbox" class="form-check-input" @bind="selectAllOnPage" @onclick="ToggleSelectAll" />
                    </th>
                    <th>ID</th>
                    <th>Customer</th>
                    <th>Product</th>
                    <th>Unit Price</th>
                    <th>Quantity</th>
                    <th>Total</th>
                    <th>Status</th>
                    <th>Created</th>
                    <th>Valid Until</th>
                    <th>Comments</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (isLoading)
                {
                    <tr>
                        <td colspan="11" class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="text-muted mt-2">Loading quotes...</p>
                        </td>
                    </tr>
                }
                else
                {
                    @foreach (Quote quote in pagedQuotes.Items)
                    {
                    <tr class="@(IsQuoteSelected(quote.Id) ? "table-primary" : "")">
                        <td>
                            @if (editingId != quote.Id)
                            {
                                <input type="checkbox" class="form-check-input" 
                                       checked="@IsQuoteSelected(quote.Id)" 
                                       @onchange="() => ToggleQuoteSelection(quote.Id)" />
                            }
                        </td>
                        @if (editingId == quote.Id)
                        {
                            <td>@quote.Id</td>
                            <td>
                                <input class="form-control form-control-sm @(IsCustomerNameValid() ? "" : "is-invalid")" @bind="draft!.CustomerName" placeholder="Customer name" />
                                @if (!IsCustomerNameValid())
                                {
                                    <div class="invalid-feedback" style="display: block; font-size: 0.75rem;">
                                        Required
                                    </div>
                                }
                            </td>
                            <td>
                                <input class="form-control form-control-sm @(IsProductNameValid() ? "" : "is-invalid")" @bind="draft!.ProductName" placeholder="Product name" />
                                @if (!IsProductNameValid())
                                {
                                    <div class="invalid-feedback" style="display: block; font-size: 0.75rem;">
                                        Required
                                    </div>
                                }
                            </td>
                            <td>
                                <input type="number" step="0.01" min="0.01" class="form-control form-control-sm @(IsUnitPriceValid() ? "" : "is-invalid")" @bind="draft!.UnitPrice" placeholder="0.00" />
                                @if (!IsUnitPriceValid())
                                {
                                    <div class="invalid-feedback" style="display: block; font-size: 0.75rem;">
                                        Must be a numerical value above $0
                                    </div>
                                }
                            </td>
                            <td>
                                <input type="number" min="1" class="form-control form-control-sm @(IsQuantityValid() ? "" : "is-invalid")" @bind="draft!.Quantity" placeholder="1" />
                                @if (!IsQuantityValid())
                                {
                                    <div class="invalid-feedback" style="display: block; font-size: 0.75rem;">
                                        Must be greater than 0.
                                    </div>
                                }
                            </td>

                            <td>@((draft!.UnitPrice * draft!.Quantity).ToString("C"))</td> // generate total price 

                            <td>
                                <select class="form-select form-select-sm" @bind="draft!.Status">
                                    <option>Draft</option>
                                    <option>Pending</option>
                                    <option>Approved</option>
                                    <option>Rejected</option>
                                </select>
                            </td>
                            <td>@quote.CreatedDate.ToString("MM/dd/yyyy")</td>
                            <td>
                                <input type="date" class="form-control form-control-sm" @bind="draft!.ValidQuotePeriod" />
                            </td>
                            <td>
                                <textarea class="form-control form-control-sm" rows="2" @bind="draft!.Comments" placeholder="Add comments..."></textarea>
                            </td>
                            <td>
                                <div class="btn-group" role="group">
                                    <button class="btn btn-sm btn-primary" @onclick="ShowSaveConfirmation" disabled="@(!IsFormValid())" title="@(IsFormValid() ? "Save changes" : "Fix validation errors to save")">
                                        <i class="bi bi-check-circle"></i> Save
                                    </button>
                                    <button class="btn btn-sm btn-secondary" @onclick="CancelEdit" title="Cancel editing">
                                        <i class="bi bi-x-circle"></i> Cancel
                                    </button>
                                </div>
                            </td>
                        }
                        else
                        {
                            <td>@quote.Id</td>
                            <td>@quote.CustomerName</td>
                            <td>@quote.ProductName</td>
                            <td>@quote.UnitPrice.ToString("C")</td>
                            <td>@quote.Quantity</td>
                            <td>@quote.TotalPrice.ToString("C")</td>
                            <td>@quote.Status</td>
                            <td>@quote.CreatedDate.ToString("MM/dd/yyyy")</td>
                            <td>
                                @{
                                    var daysUntilExpiry = (quote.ValidQuotePeriod - DateTime.Now).Days;
                                    var isExpired = quote.ValidQuotePeriod < DateTime.Now;
                                    var isExpiringSoon = daysUntilExpiry <= 7 && daysUntilExpiry >= 0;
                                }
                                <span class="@(isExpired ? "text-danger" : isExpiringSoon ? "text-warning" : "text-success")" 
                                      title="@(isExpired ? "Expired" : isExpiringSoon ? "Expires soon" : "Valid")">
                                    @quote.ValidQuotePeriod.ToString("MM/dd/yyyy")
                                </span>
                            </td>
                            <td>
                                @if (!string.IsNullOrWhiteSpace(quote.Comments))
                                {
                                    <span class="text-muted" title="@quote.Comments">
                                        @(quote.Comments.Length > 50 ? quote.Comments.Substring(0, 50) + "..." : quote.Comments)
                                    </span>
                                }
                                else
                                {
                                    <span class="text-muted">No comments</span>
                                }
                            </td>
                            <td>
                                <div class="btn-group" role="group">
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => BeginEdit(quote)">
                                        <i class="bi bi-pencil"></i> Edit
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(quote.Id, quote.CustomerName)">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </div>
                            </td>
                        }
                    </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Mobile Card View -->
<div class="d-lg-none">
    @if (isLoading)
    {
        <div class="text-center py-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="text-muted mt-2">Loading quotes...</p>
        </div>
    }
    else
    {
        @foreach (Quote quote in pagedQuotes.Items)
        {
        <div class="card mb-3 @(IsQuoteSelected(quote.Id) ? "border-primary" : "")">
            <div class="card-body">
                @if (editingId != quote.Id)
                {
                    <div class="form-check mb-2">
                        <input type="checkbox" class="form-check-input" 
                               checked="@IsQuoteSelected(quote.Id)" 
                               @onchange="() => ToggleQuoteSelection(quote.Id)" 
                               id="checkbox-mobile-@quote.Id" />
                        <label class="form-check-label" for="checkbox-mobile-@quote.Id">
                            <small class="text-muted">Select this quote</small>
                        </label>
                    </div>
                }
                @if (editingId == quote.Id)
                {
                    <div class="row">
                        <div class="col-12 mb-3">
                            <h6 class="card-title">Editing Quote #@quote.Id</h6>
                            @if (!IsFormValid())
                            {
                                <div class="alert alert-warning alert-sm py-2" role="alert">
                                    <small><i class="bi bi-exclamation-triangle"></i> Please fix validation errors to save changes.</small>
                                </div>
                            }
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Customer Name <span class="text-danger">*</span></label>
                            <input class="form-control @(IsCustomerNameValid() ? "" : "is-invalid")" @bind="draft!.CustomerName" placeholder="Enter customer name" />
                            @if (!IsCustomerNameValid())
                            {
                                <div class="invalid-feedback">
                                    Customer name is required and cannot be empty.
                                </div>
                            }
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Product Name <span class="text-danger">*</span></label>
                            <input class="form-control @(IsProductNameValid() ? "" : "is-invalid")" @bind="draft!.ProductName" placeholder="Enter product name" />
                            @if (!IsProductNameValid())
                            {
                                <div class="invalid-feedback">
                                    Product name is required and cannot be empty.
                                </div>
                            }
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Unit Price <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" step="0.01" min="0.01" class="form-control @(IsUnitPriceValid() ? "" : "is-invalid")" @bind="draft!.UnitPrice" placeholder="0.00" />
                            </div>
                            @if (!IsUnitPriceValid())
                            {
                                <div class="invalid-feedback">
                                    Unit price must be greater than $0.00.
                                </div>
                            }
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Quantity <span class="text-danger">*</span></label>
                            <input type="number" min="1" class="form-control @(IsQuantityValid() ? "" : "is-invalid")" @bind="draft!.Quantity" placeholder="1" />
                            @if (!IsQuantityValid())
                            {
                                <div class="invalid-feedback">
                                    Quantity must be a whole number greater than 0.
                                </div>
                            }
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" @bind="draft!.Status">
                                <option>Draft</option>
                                <option>Pending</option>
                                <option>Approved</option>
                                <option>Rejected</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Valid Until</label>
                            <input type="date" class="form-control" @bind="draft!.ValidQuotePeriod" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Total Price</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input class="form-control" value="@((draft!.UnitPrice * draft!.Quantity).ToString("F2"))" readonly />
                            </div>
                        </div>
                        <div class="col-12 mb-3">
                            <label class="form-label">Comments</label>
                            <textarea class="form-control" rows="3" @bind="draft!.Comments" placeholder="Add any notes, special instructions, or comments about this quote..."></textarea>
                        </div>
                        <div class="col-12">
                            <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                <button class="btn btn-primary" @onclick="ShowSaveConfirmation" disabled="@(!IsFormValid())" title="@(IsFormValid() ? "Save changes" : "Fix validation errors to save")">
                                    <i class="bi bi-check-circle"></i> Save Changes
                                </button>
                                <button class="btn btn-secondary" @onclick="CancelEdit" title="Cancel editing">
                                    <i class="bi bi-x-circle"></i> Cancel
                                </button>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="row">
                        <div class="col-8">
                            <h6 class="card-title">Quote #@quote.Id</h6>
                            <p class="card-text mb-1"><strong>Customer:</strong> @quote.CustomerName</p>
                            <p class="card-text mb-1"><strong>Product:</strong> @quote.ProductName</p>
                            <p class="card-text mb-1"><strong>Price:</strong> @quote.UnitPrice.ToString("C") × @quote.Quantity = @quote.TotalPrice.ToString("C")</p>
                            <p class="card-text mb-1"><strong>Status:</strong> <span class="badge bg-secondary">@quote.Status</span></p>
                            <p class="card-text mb-1">
                                <strong>Valid Until:</strong> 
                                @{
                                    var daysUntilExpiry = (quote.ValidQuotePeriod - DateTime.Now).Days;
                                    var isExpired = quote.ValidQuotePeriod < DateTime.Now;
                                    var isExpiringSoon = daysUntilExpiry <= 7 && daysUntilExpiry >= 0;
                                }
                                <span class="@(isExpired ? "text-danger" : isExpiringSoon ? "text-warning" : "text-success")" 
                                      title="@(isExpired ? "Expired" : isExpiringSoon ? "Expires soon" : "Valid")">
                                    @quote.ValidQuotePeriod.ToString("MM/dd/yyyy")
                                </span>
                            </p>
                            @if (!string.IsNullOrWhiteSpace(quote.Comments))
                            {
                                <p class="card-text mb-1"><strong>Comments:</strong> <span class="text-muted">@quote.Comments</span></p>
                            }
                            <p class="card-text"><small class="text-muted">Created: @quote.CreatedDate.ToString("MM/dd/yyyy")</small></p>
                        </div>
                        <div class="col-4 text-end">
                            <div class="d-grid gap-2">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => BeginEdit(quote)">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(quote.Id, quote.CustomerName)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        }
    }
</div>

<!-- Pagination -->
@if (pagedQuotes.TotalPages > 1 || isLoading)
{
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <Pagination Model="pagedQuotes" 
                               OnPageChanged="OnPageChangedAsync" 
                               OnPageSizeChanged="OnPageSizeChangedAsync" 
                               ShowPageSizeSelector="true" />
                </div>
            </div>
        </div>
    </div>
}

<!-- Save Confirmation Modal -->
@if (showSaveConfirmation)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-question-circle text-warning"></i> @confirmationTitle
                    </h5>
                </div>
                <div class="modal-body">
                    <p>@confirmationMessage</p>
                    @if (draft != null)
                    {
                        <div class="alert alert-info">
                            <h6>Changes to be saved:</h6>
                            <ul class="mb-0">
                                <li><strong>Customer:</strong> @draft.CustomerName</li>
                                <li><strong>Product:</strong> @draft.ProductName</li>
                                <li><strong>Unit Price:</strong> @draft.UnitPrice.ToString("C")</li>
                                <li><strong>Quantity:</strong> @draft.Quantity</li>
                                <li><strong>Total:</strong> @draft.TotalPrice.ToString("C")</li>
                                <li><strong>Status:</strong> @draft.Status</li>
                                <li><strong>Valid Until:</strong> @draft.ValidQuotePeriod.ToString("MM/dd/yyyy")</li>
                                @if (!string.IsNullOrWhiteSpace(draft.Comments))
                                {
                                    <li><strong>Comments:</strong> @draft.Comments</li>
                                }
                            </ul>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelSaveConfirmation">
                        <i class="bi bi-x-circle"></i> Cancel
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmSaveEditAsync">
                        <i class="bi bi-check-circle"></i> Yes, Save Changes
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- New Quote Confirmation Modal -->
@if (showNewQuoteConfirmation)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-question-circle text-warning"></i> @confirmationTitle
                    </h5>
                </div>
                <div class="modal-body">
                    <p>@confirmationMessage</p>
                    @if (newQuote != null)
                    {
                        <div class="alert alert-info">
                            <h6>New quote details:</h6>
                            <ul class="mb-0">
                                <li><strong>Customer:</strong> @newQuote.CustomerName</li>
                                <li><strong>Product:</strong> @newQuote.ProductName</li>
                                <li><strong>Unit Price:</strong> @newQuote.UnitPrice.ToString("C")</li>
                                <li><strong>Quantity:</strong> @newQuote.Quantity</li>
                                <li><strong>Total:</strong> @newQuote.TotalPrice.ToString("C")</li>
                                <li><strong>Status:</strong> @newQuote.Status</li>
                                <li><strong>Valid Until:</strong> @newQuote.ValidQuotePeriod.ToString("MM/dd/yyyy")</li>
                                @if (!string.IsNullOrWhiteSpace(newQuote.Comments))
                                {
                                    <li><strong>Comments:</strong> @newQuote.Comments</li>
                                }
                            </ul>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelNewQuoteConfirmation">
                        <i class="bi bi-x-circle"></i> Cancel
                    </button>
                    <button type="button" class="btn btn-success" @onclick="ConfirmSaveNewQuoteAsync">
                        <i class="bi bi-check-circle"></i> Yes, Create Quote
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Bulk Delete Confirmation Modal -->
@if (showBulkDeleteConfirmation)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">
                        <i class="bi bi-exclamation-triangle"></i> @confirmationTitle
                    </h5>
                </div>
                <div class="modal-body">
                    <p>@confirmationMessage</p>
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle"></i>
                        <strong>Warning:</strong> This action cannot be undone. All selected quotes will be permanently deleted from the system.
                    </div>
                    <p class="mb-0"><strong>Selected quotes:</strong> @selectedQuoteIds.Count</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelBulkDeleteConfirmation">
                        <i class="bi bi-x-circle"></i> Cancel
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmBulkDeleteAsync">
                        <i class="bi bi-trash"></i> Yes, Delete All Selected
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteConfirmation)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-exclamation-triangle text-danger"></i> @confirmationTitle
                    </h5>
                </div>
                <div class="modal-body">
                    <p>@confirmationMessage</p>
                    @if (quoteToDelete != null)
                    {
                        <div class="alert alert-danger">
                            <h6>Quote to be deleted:</h6>
                            <ul class="mb-0">
                                <li><strong>ID:</strong> #@quoteToDelete.Id</li>
                                <li><strong>Customer:</strong> @quoteToDelete.CustomerName</li>
                                <li><strong>Product:</strong> @quoteToDelete.ProductName</li>
                                <li><strong>Unit Price:</strong> @quoteToDelete.UnitPrice.ToString("C")</li>
                                <li><strong>Quantity:</strong> @quoteToDelete.Quantity</li>
                                <li><strong>Total:</strong> @quoteToDelete.TotalPrice.ToString("C")</li>
                                <li><strong>Status:</strong> @quoteToDelete.Status</li>
                                <li><strong>Created:</strong> @quoteToDelete.CreatedDate.ToString("MM/dd/yyyy")</li>
                                <li><strong>Valid Until:</strong> @quoteToDelete.ValidQuotePeriod.ToString("MM/dd/yyyy")</li>
                                @if (!string.IsNullOrWhiteSpace(quoteToDelete.Comments))
                                {
                                    <li><strong>Comments:</strong> @quoteToDelete.Comments</li>
                                }
                            </ul>
                        </div>
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle"></i>
                            <strong>Warning:</strong> This action cannot be undone. The quote will be permanently deleted from the system.
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDeleteConfirmation">
                        <i class="bi bi-x-circle"></i> Cancel
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteQuoteAsync">
                        <i class="bi bi-trash"></i> Yes, Delete Quote
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private PagedResult<Quote> pagedQuotes = new PagedResult<Quote>();
    private int? editingId;
    private Quote? draft;
    private bool isAddingNew = false;
    private Quote? newQuote;
    private QuoteFilter filter = new QuoteFilter();
    private int currentPage = 1;
    private int pageSize = 25;
    private bool isLoading = false;
    
    // Bulk operations
    private HashSet<int> selectedQuoteIds = new HashSet<int>();
    private bool selectAllOnPage = false;
    
    // Advanced filter variables
    private bool showAdvancedFilters = false;
    
    // Confirmation dialog variables
    private bool showSaveConfirmation = false;
    private bool showNewQuoteConfirmation = false;
    private bool showDeleteConfirmation = false;
    private string confirmationMessage = "";
    private string confirmationTitle = "";
    private Quote? quoteToDelete;

    private string SearchTerm
    {
        get => filter.SearchTerm ?? "";
        set
        {
            filter.SearchTerm = value;
            currentPage = 1; // Reset to first page when searching
            LoadQuotesAsync();
        }
    }

    private string SortBy
    {
        get => filter.SortBy;
        set
        {
            filter.SortBy = value;
            LoadQuotesAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadQuotesAsync();
    }

    private async Task LoadQuotesAsync()
    {
        if (isLoading) return;
        
        isLoading = true;
        try
        {
            pagedQuotes = await QuoteService.GetQuotesFilteredAsync(filter, currentPage, pageSize);
        }
        finally
        {
            isLoading = false;
        }
        StateHasChanged();
    }

    private async Task OnPageChangedAsync(int page)
    {
        currentPage = page;
        await LoadQuotesAsync();
    }

    private async Task OnPageSizeChangedAsync(int newPageSize)
    {
        pageSize = newPageSize;
        currentPage = 1; // Reset to first page when changing page size
        await LoadQuotesAsync();
    }

    private async Task ClearSearchAsync()
    {
        filter.SearchTerm = "";
        currentPage = 1;
        await LoadQuotesAsync();
    }

    private void ToggleAdvancedFilters()
    {
        showAdvancedFilters = !showAdvancedFilters;
    }

    private async Task ClearAllFiltersAsync()
    {
        filter = new QuoteFilter();
        currentPage = 1;
        await LoadQuotesAsync();
    }

    private async Task ApplyFiltersAsync()
    {
        currentPage = 1;
        await LoadQuotesAsync();
    }

    private bool HasActiveFilters()
    {
        return filter.HasActiveFilters();
    }

    private List<string> GetUniqueCustomers()
    {
        return pagedQuotes.Items.Select(q => q.CustomerName).Distinct().OrderBy(c => c).ToList();
    }

    private List<string> GetUniqueProducts()
    {
        return pagedQuotes.Items.Select(q => q.ProductName).Distinct().OrderBy(p => p).ToList();
    }

    // Confirmation dialog methods
    private void ShowSaveConfirmation()
    {
        if (draft != null && editingId.HasValue)
        {
            var originalQuote = pagedQuotes.Items.FirstOrDefault(q => q.Id == editingId.Value);
            if (originalQuote != null)
            {
                confirmationTitle = "Confirm Save Changes";
                confirmationMessage = $"Are you sure you want to save changes to Quote #{editingId.Value}?";
                showSaveConfirmation = true;
            }
        }
    }

    private void ShowNewQuoteConfirmation()
    {
        if (newQuote != null)
        {
            confirmationTitle = "Confirm New Quote";
            confirmationMessage = $"Are you sure you want to create a new quote for {newQuote.CustomerName}?";
            showNewQuoteConfirmation = true;
        }
    }

    private void CancelSaveConfirmation()
    {
        showSaveConfirmation = false;
        confirmationMessage = "";
        confirmationTitle = "";
    }

    private void CancelNewQuoteConfirmation()
    {
        showNewQuoteConfirmation = false;
        confirmationMessage = "";
        confirmationTitle = "";
    }

    private async Task ConfirmSaveEditAsync()
    {
        showSaveConfirmation = false;
        await SaveEditAsync(); // Call the async save method
    }

    private async Task ConfirmSaveNewQuoteAsync()
    {
        showNewQuoteConfirmation = false;
        await SaveNewQuoteAsync(); // Call the async save method
    }

    private void CancelDeleteConfirmation()
    {
        showDeleteConfirmation = false;
        quoteToDelete = null;
        confirmationMessage = "";
        confirmationTitle = "";
    }

    private async Task ConfirmDeleteQuoteAsync()
    {
        if (quoteToDelete != null)
        {
            showDeleteConfirmation = false;
            await DeleteQuoteAsync(quoteToDelete.Id);
            quoteToDelete = null;
        }
    }

    private void BeginEdit(Quote quote)
    {
        editingId = quote.Id;
        draft = new Quote
            {
                Id = quote.Id,
                CustomerName = quote.CustomerName,
                ProductName = quote.ProductName,
                UnitPrice = quote.UnitPrice,
                Quantity = quote.Quantity,
                CreatedDate = quote.CreatedDate,
                ValidQuotePeriod = quote.ValidQuotePeriod,
                Status = quote.Status,
                Comments = quote.Comments
            };
    }

    private void CancelEdit()
    {
        //cancel = null
        editingId = null;
        draft = null;
    }

    private async Task SaveEditAsync()
    {
        if (editingId is null || draft is null) return;

        // Validate numeric fields
        if (!IsValidNumericFields())
        {
            return; // Don't save if validation fails
        }

        // Persist changes using the service
        await QuoteService.UpdateQuoteAsync(draft);
        
        // Refresh the quotes list to reflect changes
        await LoadQuotesAsync();

        CancelEdit();
    }

    private bool IsValidNumericFields()
    {
        if (draft == null) return false;

        // Check if UnitPrice is valid (greater than 0)
        if (draft.UnitPrice <= 0)
        {
            return false;
        }

        // Check if Quantity is valid (greater than 0 and whole number)
        if (draft.Quantity <= 0 || draft.Quantity % 1 != 0)
        {
            return false;
        }

        return true;
    }

    private bool IsUnitPriceValid()
    {
        return draft != null && draft.UnitPrice > 0;
    }

    private bool IsQuantityValid()
    {
        return draft != null && draft.Quantity > 0 && draft.Quantity % 1 == 0;
    }

    private bool IsFormValid()
    {
        return IsUnitPriceValid() && IsQuantityValid() && IsStringFieldsValid();
    }

    private bool IsCustomerNameValid()
    {
        return draft != null && !string.IsNullOrWhiteSpace(draft.CustomerName);
    }

    private bool IsProductNameValid()
    {
        return draft != null && !string.IsNullOrWhiteSpace(draft.ProductName);
    }

    private bool IsStringFieldsValid()
    {
        return IsCustomerNameValid() && IsProductNameValid();
    }

    private void ConfirmDelete(int id, string customerName)
    {
        quoteToDelete = pagedQuotes.Items.FirstOrDefault(q => q.Id == id);
        if (quoteToDelete != null)
        {
            confirmationTitle = "Confirm Delete Quote";
            confirmationMessage = $"Are you sure you want to delete the quote for {customerName}?";
            showDeleteConfirmation = true;
        }
    }

    private async Task DeleteQuoteAsync(int id)
    {
        // Delete from service
        await QuoteService.DeleteQuoteAsync(id);
        
        // Refresh the quotes list to reflect changes
        await LoadQuotesAsync();
        
        // If we were editing this quote, cancel edit mode
        if (editingId == id)
        {
            CancelEdit();
        }
    }

    private void BeginAddNew()
    {
        isAddingNew = true;
        newQuote = new Quote
        {
            CustomerName = "",
            ProductName = "",
            UnitPrice = 0,
            Quantity = 0,
            ValidQuotePeriod = DateTime.Now.AddDays(30), // Default to 30 days from now
            Status = "Draft",
            Comments = ""
        };
    }

    private void CancelAddNew()
    {
        isAddingNew = false;
        newQuote = null;
    }

    private async Task SaveNewQuoteAsync()
    {
        if (newQuote == null || !IsNewFormValid()) return;

        await QuoteService.AddQuoteAsync(newQuote);
        await LoadQuotesAsync();
        CancelAddNew();
    }

    // Validation methods for new quote form
    private bool IsNewCustomerNameValid()
    {
        return newQuote != null && !string.IsNullOrWhiteSpace(newQuote.CustomerName);
    }

    private bool IsNewProductNameValid()
    {
        return newQuote != null && !string.IsNullOrWhiteSpace(newQuote.ProductName);
    }

    private bool IsNewUnitPriceValid()
    {
        return newQuote != null && newQuote.UnitPrice > 0;
    }

    private bool IsNewQuantityValid()
    {
        return newQuote != null && newQuote.Quantity > 0 && newQuote.Quantity % 1 == 0;
    }

    private bool IsNewFormValid()
    {
        return IsNewCustomerNameValid() && IsNewProductNameValid() && 
               IsNewUnitPriceValid() && IsNewQuantityValid();
    }

    // CSV Import/Export functionality
    private ElementReference fileInputRef;

    private async Task TriggerFileInput()
    {
        Console.WriteLine("TriggerFileInput called");
        await JSRuntime.InvokeVoidAsync("triggerFileInput", fileInputRef);
    }

    private async Task OnFileSelected(ChangeEventArgs e)
    {
        try
        {
            Console.WriteLine("OnFileSelected called");
            var files = e.Value as IBrowserFile[];
            Console.WriteLine($"Files array: {files?.Length ?? 0}");
            
            if (files != null && files.Length > 0)
            {
                var file = files[0];
                Console.WriteLine($"File selected: {file.Name}, ContentType: {file.ContentType}, Size: {file.Size}");
                
                if (file.ContentType == "text/csv" || file.Name.EndsWith(".csv"))
                {
                    using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB max
                    using var reader = new StreamReader(stream);
                    var csvContent = await reader.ReadToEndAsync();
                    
                    Console.WriteLine($"CSV content length: {csvContent.Length}");
                    Console.WriteLine($"First 200 chars: {csvContent.Substring(0, Math.Min(200, csvContent.Length))}");
                    
                    var importedCount = await QuoteService.ImportFromCsvAsync(csvContent);
                    
                    // Refresh the quotes list
                    await LoadQuotesAsync();
                    
                    // Show success message using JavaScript alert
                    if (importedCount > 0)
                    {
                        await JSRuntime.InvokeVoidAsync("alert", $"Successfully imported {importedCount} quotes!");
                    }
                    else
                    {
                        await JSRuntime.InvokeVoidAsync("alert", "No quotes were imported. Please check your CSV file format.");
                    }
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Please select a valid CSV file.");
                }
            }
            else
            {
                Console.WriteLine("No files selected");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Import error: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Import error: {ex.Message}");
        }
    }

    private async Task ExportToCsvAsync()
    {
        try
        {
            var csvContent = await QuoteService.ExportToCsvAsync();
            var fileName = $"quotes_export_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
            
            // Create and trigger download
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, csvContent);
        }
        catch (Exception ex)
        {
            // Handle error - you might want to show a toast notification
            Console.WriteLine($"Export error: {ex.Message}");
        }
    }

    // Bulk Operations
    private void ToggleSelectAll()
    {
        selectAllOnPage = !selectAllOnPage;
        if (selectAllOnPage)
        {
            foreach (var quote in pagedQuotes.Items)
            {
                selectedQuoteIds.Add(quote.Id);
            }
        }
        else
        {
            foreach (var quote in pagedQuotes.Items)
            {
                selectedQuoteIds.Remove(quote.Id);
            }
        }
    }

    private void ToggleQuoteSelection(int quoteId)
    {
        if (selectedQuoteIds.Contains(quoteId))
        {
            selectedQuoteIds.Remove(quoteId);
            selectAllOnPage = false;
        }
        else
        {
            selectedQuoteIds.Add(quoteId);
            // Check if all on page are now selected
            selectAllOnPage = pagedQuotes.Items.All(q => selectedQuoteIds.Contains(q.Id));
        }
    }

    private bool IsQuoteSelected(int quoteId)
    {
        return selectedQuoteIds.Contains(quoteId);
    }

    private void ClearSelection()
    {
        selectedQuoteIds.Clear();
        selectAllOnPage = false;
    }

    private async Task BulkDeleteAsync()
    {
        if (selectedQuoteIds.Count == 0) return;

        confirmationTitle = "Confirm Bulk Delete";
        confirmationMessage = $"Are you sure you want to delete {selectedQuoteIds.Count} selected quote(s)? This action cannot be undone.";
        showBulkDeleteConfirmation = true;
    }

    private async Task ConfirmBulkDeleteAsync()
    {
        showBulkDeleteConfirmation = false;
        
        try
        {
            var deletedCount = await QuoteService.BulkDeleteQuotesAsync(selectedQuoteIds.ToList());
            ClearSelection();
            await LoadQuotesAsync();
            await JSRuntime.InvokeVoidAsync("alert", $"Successfully deleted {deletedCount} quote(s)!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error deleting quotes: {ex.Message}");
        }
    }

    private async Task BulkUpdateStatusAsync(string newStatus)
    {
        if (selectedQuoteIds.Count == 0) return;

        try
        {
            var updatedCount = await QuoteService.BulkUpdateStatusAsync(selectedQuoteIds.ToList(), newStatus);
            ClearSelection();
            await LoadQuotesAsync();
            await JSRuntime.InvokeVoidAsync("alert", $"Successfully updated status for {updatedCount} quote(s) to {newStatus}!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating status: {ex.Message}");
        }
    }

    private async Task BulkExportAsync()
    {
        if (selectedQuoteIds.Count == 0) return;

        try
        {
            var selectedQuotes = await QuoteService.GetQuotesByIdsAsync(selectedQuoteIds.ToList());
            
            var csv = new StringBuilder();
            csv.AppendLine("Id,CustomerName,ProductName,UnitPrice,Quantity,TotalPrice,CreatedDate,ValidQuotePeriod,Status,Comments");
            
            foreach (var quote in selectedQuotes)
            {
                var customerName = quote.CustomerName.Replace("\"", "\"\"");
                var productName = quote.ProductName.Replace("\"", "\"\"");
                var status = quote.Status.Replace("\"", "\"\"");
                var comments = quote.Comments.Replace("\"", "\"\"");
                
                csv.AppendLine($"{quote.Id}," +
                              $"\"{customerName}\"," +
                              $"\"{productName}\"," +
                              $"{quote.UnitPrice}," +
                              $"{quote.Quantity}," +
                              $"{quote.TotalPrice}," +
                              $"{quote.CreatedDate:yyyy-MM-dd HH:mm:ss}," +
                              $"{quote.ValidQuotePeriod:yyyy-MM-dd HH:mm:ss}," +
                              $"\"{status}\"," +
                              $"\"{comments}\"");
            }
            
            var fileName = $"quotes_selected_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, csv.ToString());
            await JSRuntime.InvokeVoidAsync("alert", $"Successfully exported {selectedQuotes.Count} quote(s)!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error exporting quotes: {ex.Message}");
        }
    }

    private async Task BulkAdjustPricesAsync(decimal percentage)
    {
        if (selectedQuoteIds.Count == 0) return;

        try
        {
            var updatedCount = await QuoteService.BulkUpdatePricesAsync(selectedQuoteIds.ToList(), percentage);
            ClearSelection();
            await LoadQuotesAsync();
            await JSRuntime.InvokeVoidAsync("alert", $"Successfully adjusted prices for {updatedCount} quote(s) by {percentage:+0.##;-0.##}%!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error adjusting prices: {ex.Message}");
        }
    }

    // Bulk delete confirmation
    private bool showBulkDeleteConfirmation = false;
    
    private void CancelBulkDeleteConfirmation()
    {
        showBulkDeleteConfirmation = false;
    }

}

