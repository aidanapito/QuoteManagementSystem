@page "/quotes"
@rendermode InteractiveServer
@using TestApp.Models
@using TestApp.Services
@using Microsoft.JSInterop
@inject QuoteService QuoteService
@inject IJSRuntime JSRuntime

<PageTitle>Quotes</PageTitle>

<h1>Quote Management</h1>

<div class="row mb-3">
    <div class="col-lg-6 col-md-5 mb-2 mb-md-0">
        <div class="input-group">
            <span class="input-group-text">
                <i class="bi bi-search"></i>
            </span>
            <input type="text" class="form-control" placeholder="Search by customer, product, or status..." 
                   @bind="SearchTerm" @bind:event="oninput" />
            @if (!string.IsNullOrEmpty(searchTerm))
            {
                <button class="btn btn-outline-danger" type="button" @onclick="ClearSearch" title="Clear search">
                    <i class="bi bi-x-circle-fill"></i> <span class="d-none d-sm-inline">Clear</span>
                </button>
            }
        </div>
    </div>
    <div class="col-lg-3 col-md-4 mb-2 mb-md-0">
        <div class="input-group">
            <span class="input-group-text">
                <i class="bi bi-sort-down"></i>
            </span>
            <select class="form-select" @bind="SortBy" @bind:event="onchange">
                <option value="date-desc">Date (Newest First)</option>
                <option value="date-asc">Date (Oldest First)</option>
                <option value="customer-asc">Customer (A-Z)</option>
                <option value="customer-desc">Customer (Z-A)</option>
                <option value="product-asc">Product (A-Z)</option>
                <option value="product-desc">Product (Z-A)</option>
                <option value="total-desc">Total (High to Low)</option>
                <option value="total-asc">Total (Low to High)</option>
                <option value="status-asc">Status (A-Z)</option>
                <option value="status-desc">Status (Z-A)</option>
            </select>
        </div>
    </div>
    <div class="col-lg-3 col-md-3 text-md-end">
        <div class="d-flex gap-2 justify-content-md-end">
            <button class="btn btn-outline-secondary" @onclick="ToggleAdvancedFilters" title="Advanced Filters">
                <i class="bi bi-funnel"></i> <span class="d-none d-sm-inline">Filters</span>
            </button>
            <button class="btn btn-success w-100 w-md-auto" @onclick="BeginAddNew" disabled="@(isAddingNew || editingId.HasValue)">
                <i class="bi bi-plus-circle"></i> Add New Quote
            </button>
        </div>
    </div>
</div>

<!-- Advanced Filters Panel -->
@if (showAdvancedFilters)
{
    <div class="row mb-3">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="mb-0"><i class="bi bi-funnel-fill"></i> Advanced Filters</h6>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="ClearAllFilters" title="Clear all filters">
                        <i class="bi bi-x-circle"></i> Clear All
                    </button>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Customer</label>
                            <select class="form-select" @bind="filterCustomer" @bind:event="onchange">
                                <option value="">All Customers</option>
                                @foreach (var customer in GetUniqueCustomers())
                                {
                                    <option value="@customer">@customer</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Product</label>
                            <select class="form-select" @bind="filterProduct" @bind:event="onchange">
                                <option value="">All Products</option>
                                @foreach (var product in GetUniqueProducts())
                                {
                                    <option value="@product">@product</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" @bind="filterStatus" @bind:event="onchange">
                                <option value="">All Statuses</option>
                                <option value="Draft">Draft</option>
                                <option value="Pending">Pending</option>
                                <option value="Approved">Approved</option>
                                <option value="Rejected">Rejected</option>
                            </select>
                        </div>
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Date Range</label>
                            <select class="form-select" @bind="dateRangeFilter" @bind:event="onchange">
                                <option value="all">All Dates</option>
                                <option value="today">Today</option>
                                <option value="week">This Week</option>
                                <option value="month">This Month</option>
                                <option value="quarter">This Quarter</option>
                                <option value="year">This Year</option>
                                <option value="custom">Custom Range</option>
                            </select>
                        </div>
                    </div>
                    @if (dateRangeFilter == "custom")
                    {
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">From Date</label>
                                <input type="date" class="form-control" @bind="customStartDate" @bind:event="onchange" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">To Date</label>
                                <input type="date" class="form-control" @bind="customEndDate" @bind:event="onchange" />
                            </div>
                        </div>
                    }
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Price Range</label>
                            <div class="row">
                                <div class="col-6">
                                    <input type="number" step="0.01" class="form-control" @bind="minPrice" @bind:event="oninput" placeholder="Min $" />
                                </div>
                                <div class="col-6">
                                    <input type="number" step="0.01" class="form-control" @bind="maxPrice" @bind:event="oninput" placeholder="Max $" />
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Quantity Range</label>
                            <div class="row">
                                <div class="col-6">
                                    <input type="number" class="form-control" @bind="minQuantity" @bind:event="oninput" placeholder="Min Qty" />
                                </div>
                                <div class="col-6">
                                    <input type="number" class="form-control" @bind="maxQuantity" @bind:event="oninput" placeholder="Max Qty" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-muted">
                                    Showing @filteredQuotes.Count of @quotes.Count quotes
                                    @if (HasActiveFilters())
                                    {
                                        <span class="badge bg-primary ms-2">Filtered</span>
                                    }
                                </small>
                                <button class="btn btn-primary btn-sm" @onclick="ApplyFilters">
                                    <i class="bi bi-search"></i> Apply Filters
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@if (isAddingNew)
{
    <div class="row mb-3">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>Add New Quote</h5>
                </div>
                <div class="card-body">
                    @if (!IsNewFormValid() && newQuote != null)
                    {
                        <div class="alert alert-warning" role="alert">
                            <h6 class="alert-heading"><i class="bi bi-exclamation-triangle"></i> Please fix the following issues:</h6>
                            <ul class="mb-0">
                                @if (!IsNewCustomerNameValid())
                                {
                                    <li>Customer name is required</li>
                                }
                                @if (!IsNewProductNameValid())
                                {
                                    <li>Product name is required</li>
                                }
                                @if (!IsNewUnitPriceValid())
                                {
                                    <li>Unit price must be a numeric value greater than $0.</li>
                                }
                                @if (!IsNewQuantityValid())
                                {
                                    <li>Quantity must be a whole number greater than 0</li>
                                }
                            </ul>
                        </div>
                    }
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Customer Name <span class="text-danger">*</span></label>
                            <input class="form-control @(IsNewCustomerNameValid() ? "" : "is-invalid")" @bind="newQuote!.CustomerName" placeholder="Enter customer name" />
                            @if (!IsNewCustomerNameValid() && newQuote != null)
                            {
                                <div class="invalid-feedback">
                                    Customer name is required and cannot be empty.
                                </div>
                            }
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Product Name <span class="text-danger">*</span></label>
                            <input class="form-control @(IsNewProductNameValid() ? "" : "is-invalid")" @bind="newQuote!.ProductName" placeholder="Enter product name" />
                            @if (!IsNewProductNameValid() && newQuote != null)
                            {
                                <div class="invalid-feedback">
                                    Product name is required and cannot be empty.
                                </div>
                            }
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Unit Price <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" step="0.01" min="0.01" class="form-control @(IsNewUnitPriceValid() ? "" : "is-invalid")" @bind="newQuote!.UnitPrice" placeholder="0.00" />
                            </div>
                            @if (!IsNewUnitPriceValid() && newQuote != null)
                            {
                                <div class="invalid-feedback">
                                    Unit price must be greater than $0.00.
                                </div>
                            }
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Quantity <span class="text-danger">*</span></label>
                            <input type="number" min="1" class="form-control @(IsNewQuantityValid() ? "" : "is-invalid")" @bind="newQuote!.Quantity" placeholder="1" />
                            @if (!IsNewQuantityValid() && newQuote != null)
                            {
                                <div class="invalid-feedback">
                                    Quantity must be a whole number greater than 0.
                                </div>
                            }
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" @bind="newQuote!.Status">
                                <option>Draft</option>
                                <option>Pending</option>
                                <option>Approved</option>
                                <option>Rejected</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Total Price</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input class="form-control" value="@((newQuote!.UnitPrice * newQuote!.Quantity).ToString("F2"))" readonly />
                            </div>
                        </div>
                        <div class="col-12 mb-3">
                            <label class="form-label">Comments</label>
                            <textarea class="form-control" rows="3" @bind="newQuote!.Comments" placeholder="Add any notes, special instructions, or comments about this quote..."></textarea>
                        </div>
                    </div>
                    <div class="mt-3">
                        <button class="btn btn-primary me-2" @onclick="SaveNewQuote" disabled="@(!IsNewFormValid())">
                            <i class="bi bi-check-circle"></i> Save Quote
                        </button>
                        <button class="btn btn-secondary" @onclick="CancelAddNew">
                            <i class="bi bi-x-circle"></i> Cancel
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Desktop Table View -->
<div class="d-none d-lg-block">
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Customer</th>
                    <th>Product</th>
                    <th>Unit Price</th>
                    <th>Quantity</th>
                    <th>Total</th>
                    <th>Status</th>
                    <th>Created</th>
                    <th>Comments</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Quote quote in filteredQuotes)
                {
                    <tr>
                        @if (editingId == quote.Id)
                        {
                            <td>@quote.Id</td>
                            <td>
                                <input class="form-control form-control-sm @(IsCustomerNameValid() ? "" : "is-invalid")" @bind="draft!.CustomerName" placeholder="Customer name" />
                                @if (!IsCustomerNameValid())
                                {
                                    <div class="invalid-feedback" style="display: block; font-size: 0.75rem;">
                                        Required
                                    </div>
                                }
                            </td>
                            <td>
                                <input class="form-control form-control-sm @(IsProductNameValid() ? "" : "is-invalid")" @bind="draft!.ProductName" placeholder="Product name" />
                                @if (!IsProductNameValid())
                                {
                                    <div class="invalid-feedback" style="display: block; font-size: 0.75rem;">
                                        Required
                                    </div>
                                }
                            </td>
                            <td>
                                <input type="number" step="0.01" min="0.01" class="form-control form-control-sm @(IsUnitPriceValid() ? "" : "is-invalid")" @bind="draft!.UnitPrice" placeholder="0.00" />
                                @if (!IsUnitPriceValid())
                                {
                                    <div class="invalid-feedback" style="display: block; font-size: 0.75rem;">
                                        Must be a numerical value above $0
                                    </div>
                                }
                            </td>
                            <td>
                                <input type="number" min="1" class="form-control form-control-sm @(IsQuantityValid() ? "" : "is-invalid")" @bind="draft!.Quantity" placeholder="1" />
                                @if (!IsQuantityValid())
                                {
                                    <div class="invalid-feedback" style="display: block; font-size: 0.75rem;">
                                        Must be greater than 0.
                                    </div>
                                }
                            </td>

                            <td>@((draft!.UnitPrice * draft!.Quantity).ToString("C"))</td> // generate total price 

                            <td>
                                <select class="form-select form-select-sm" @bind="draft!.Status">
                                    <option>Draft</option>
                                    <option>Pending</option>
                                    <option>Approved</option>
                                    <option>Rejected</option>
                                </select>
                            </td>
                            <td>@quote.CreatedDate.ToString("MM/dd/yyyy")</td>
                            <td>
                                <textarea class="form-control form-control-sm" rows="2" @bind="draft!.Comments" placeholder="Add comments..."></textarea>
                            </td>
                            <td>
                                <div class="btn-group" role="group">
                                    <button class="btn btn-sm btn-primary" @onclick="SaveEdit" disabled="@(!IsFormValid())" title="@(IsFormValid() ? "Save changes" : "Fix validation errors to save")">
                                        <i class="bi bi-check-circle"></i> Save
                                    </button>
                                    <button class="btn btn-sm btn-secondary" @onclick="CancelEdit" title="Cancel editing">
                                        <i class="bi bi-x-circle"></i> Cancel
                                    </button>
                                </div>
                            </td>
                        }
                        else
                        {
                            <td>@quote.Id</td>
                            <td>@quote.CustomerName</td>
                            <td>@quote.ProductName</td>
                            <td>@quote.UnitPrice.ToString("C")</td>
                            <td>@quote.Quantity</td>
                            <td>@quote.TotalPrice.ToString("C")</td>
                            <td>@quote.Status</td>
                            <td>@quote.CreatedDate.ToString("MM/dd/yyyy")</td>
                            <td>
                                @if (!string.IsNullOrWhiteSpace(quote.Comments))
                                {
                                    <span class="text-muted" title="@quote.Comments">
                                        @(quote.Comments.Length > 50 ? quote.Comments.Substring(0, 50) + "..." : quote.Comments)
                                    </span>
                                }
                                else
                                {
                                    <span class="text-muted">No comments</span>
                                }
                            </td>
                            <td>
                                <div class="btn-group" role="group">
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => BeginEdit(quote)">
                                        <i class="bi bi-pencil"></i> Edit
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(quote.Id, quote.CustomerName)">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </div>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Mobile Card View -->
<div class="d-lg-none">
    @foreach (Quote quote in filteredQuotes)
    {
        <div class="card mb-3">
            <div class="card-body">
                @if (editingId == quote.Id)
                {
                    <div class="row">
                        <div class="col-12 mb-3">
                            <h6 class="card-title">Editing Quote #@quote.Id</h6>
                            @if (!IsFormValid())
                            {
                                <div class="alert alert-warning alert-sm py-2" role="alert">
                                    <small><i class="bi bi-exclamation-triangle"></i> Please fix validation errors to save changes.</small>
                                </div>
                            }
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Customer Name <span class="text-danger">*</span></label>
                            <input class="form-control @(IsCustomerNameValid() ? "" : "is-invalid")" @bind="draft!.CustomerName" placeholder="Enter customer name" />
                            @if (!IsCustomerNameValid())
                            {
                                <div class="invalid-feedback">
                                    Customer name is required and cannot be empty.
                                </div>
                            }
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Product Name <span class="text-danger">*</span></label>
                            <input class="form-control @(IsProductNameValid() ? "" : "is-invalid")" @bind="draft!.ProductName" placeholder="Enter product name" />
                            @if (!IsProductNameValid())
                            {
                                <div class="invalid-feedback">
                                    Product name is required and cannot be empty.
                                </div>
                            }
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Unit Price <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" step="0.01" min="0.01" class="form-control @(IsUnitPriceValid() ? "" : "is-invalid")" @bind="draft!.UnitPrice" placeholder="0.00" />
                            </div>
                            @if (!IsUnitPriceValid())
                            {
                                <div class="invalid-feedback">
                                    Unit price must be greater than $0.00.
                                </div>
                            }
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Quantity <span class="text-danger">*</span></label>
                            <input type="number" min="1" class="form-control @(IsQuantityValid() ? "" : "is-invalid")" @bind="draft!.Quantity" placeholder="1" />
                            @if (!IsQuantityValid())
                            {
                                <div class="invalid-feedback">
                                    Quantity must be a whole number greater than 0.
                                </div>
                            }
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" @bind="draft!.Status">
                                <option>Draft</option>
                                <option>Pending</option>
                                <option>Approved</option>
                                <option>Rejected</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Total Price</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input class="form-control" value="@((draft!.UnitPrice * draft!.Quantity).ToString("F2"))" readonly />
                            </div>
                        </div>
                        <div class="col-12 mb-3">
                            <label class="form-label">Comments</label>
                            <textarea class="form-control" rows="3" @bind="draft!.Comments" placeholder="Add any notes, special instructions, or comments about this quote..."></textarea>
                        </div>
                        <div class="col-12">
                            <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                <button class="btn btn-primary" @onclick="SaveEdit" disabled="@(!IsFormValid())" title="@(IsFormValid() ? "Save changes" : "Fix validation errors to save")">
                                    <i class="bi bi-check-circle"></i> Save Changes
                                </button>
                                <button class="btn btn-secondary" @onclick="CancelEdit" title="Cancel editing">
                                    <i class="bi bi-x-circle"></i> Cancel
                                </button>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="row">
                        <div class="col-8">
                            <h6 class="card-title">Quote #@quote.Id</h6>
                            <p class="card-text mb-1"><strong>Customer:</strong> @quote.CustomerName</p>
                            <p class="card-text mb-1"><strong>Product:</strong> @quote.ProductName</p>
                            <p class="card-text mb-1"><strong>Price:</strong> @quote.UnitPrice.ToString("C") × @quote.Quantity = @quote.TotalPrice.ToString("C")</p>
                            <p class="card-text mb-1"><strong>Status:</strong> <span class="badge bg-secondary">@quote.Status</span></p>
                            @if (!string.IsNullOrWhiteSpace(quote.Comments))
                            {
                                <p class="card-text mb-1"><strong>Comments:</strong> <span class="text-muted">@quote.Comments</span></p>
                            }
                            <p class="card-text"><small class="text-muted">Created: @quote.CreatedDate.ToString("MM/dd/yyyy")</small></p>
                        </div>
                        <div class="col-4 text-end">
                            <div class="d-grid gap-2">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => BeginEdit(quote)">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(quote.Id, quote.CustomerName)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private List<Quote> quotes = new List<Quote>();
    private int? editingId;
    private Quote? draft;
    private bool isAddingNew = false;
    private Quote? newQuote;
    private string searchTerm = "";
    private string sortBy = "product-asc";  //default value
    private List<Quote> filteredQuotes = new List<Quote>();
    
    // Advanced filter variables
    private bool showAdvancedFilters = false;
    private string filterCustomer = "";
    private string filterProduct = "";
    private string filterStatus = "";
    private string dateRangeFilter = "all";
    private DateTime? customStartDate;
    private DateTime? customEndDate;
    private decimal? minPrice;
    private decimal? maxPrice;
    private int? minQuantity;
    private int? maxQuantity;

    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            searchTerm = value;
            FilterQuotes();
        }
    }

    private string SortBy
    {
        get => sortBy;
        set
        {
            sortBy = value;
            FilterQuotes();
        }
    }

    protected override void OnInitialized()
    {
        quotes = QuoteService.GetAllQuotes();
        FilterQuotes();
    }

    private void FilterQuotes()
    {
        // Start with all quotes
        filteredQuotes = quotes.ToList();

        // Apply search term filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var term = searchTerm.ToLowerInvariant();
            filteredQuotes = filteredQuotes.Where(q => 
                q.CustomerName.ToLowerInvariant().Contains(term) ||
                q.ProductName.ToLowerInvariant().Contains(term) ||
                q.Status.ToLowerInvariant().Contains(term) ||
                q.Comments.ToLowerInvariant().Contains(term)
            ).ToList();
        }

        // Apply advanced filters
        if (!string.IsNullOrWhiteSpace(filterCustomer))
        {
            filteredQuotes = filteredQuotes.Where(q => q.CustomerName == filterCustomer).ToList();
        }

        if (!string.IsNullOrWhiteSpace(filterProduct))
        {
            filteredQuotes = filteredQuotes.Where(q => q.ProductName == filterProduct).ToList();
        }

        if (!string.IsNullOrWhiteSpace(filterStatus))
        {
            filteredQuotes = filteredQuotes.Where(q => q.Status == filterStatus).ToList();
        }

        // Apply date range filter
        if (dateRangeFilter != "all")
        {
            var now = DateTime.Now;
            var startDate = dateRangeFilter switch
            {
                "today" => now.Date,
                "week" => now.Date.AddDays(-(int)now.DayOfWeek),
                "month" => new DateTime(now.Year, now.Month, 1),
                "quarter" => new DateTime(now.Year, (now.Month - 1) / 3 * 3 + 1, 1),
                "year" => new DateTime(now.Year, 1, 1),
                "custom" when customStartDate.HasValue => customStartDate.Value.Date,
                _ => DateTime.MinValue
            };

            var endDate = dateRangeFilter switch
            {
                "today" => now.Date.AddDays(1).AddTicks(-1),
                "week" => now.Date.AddDays(7 - (int)now.DayOfWeek).AddDays(1).AddTicks(-1),
                "month" => new DateTime(now.Year, now.Month, 1).AddMonths(1).AddTicks(-1),
                "quarter" => new DateTime(now.Year, (now.Month - 1) / 3 * 3 + 1, 1).AddMonths(3).AddTicks(-1),
                "year" => new DateTime(now.Year + 1, 1, 1).AddTicks(-1),
                "custom" when customEndDate.HasValue => customEndDate.Value.Date.AddDays(1).AddTicks(-1),
                _ => DateTime.MaxValue
            };

            filteredQuotes = filteredQuotes.Where(q => q.CreatedDate >= startDate && q.CreatedDate <= endDate).ToList();
        }

        // Apply price range filter
        if (minPrice.HasValue)
        {
            filteredQuotes = filteredQuotes.Where(q => q.TotalPrice >= minPrice.Value).ToList();
        }

        if (maxPrice.HasValue)
        {
            filteredQuotes = filteredQuotes.Where(q => q.TotalPrice <= maxPrice.Value).ToList();
        }

        // Apply quantity range filter
        if (minQuantity.HasValue)
        {
            filteredQuotes = filteredQuotes.Where(q => q.Quantity >= minQuantity.Value).ToList();
        }

        if (maxQuantity.HasValue)
        {
            filteredQuotes = filteredQuotes.Where(q => q.Quantity <= maxQuantity.Value).ToList();
        }

        // Apply sorting
        filteredQuotes = sortBy switch
        {
            "date-desc" => filteredQuotes.OrderByDescending(q => q.CreatedDate).ToList(),
            "date-asc" => filteredQuotes.OrderBy(q => q.CreatedDate).ToList(),
            "customer-asc" => filteredQuotes.OrderBy(q => q.CustomerName).ToList(),
            "customer-desc" => filteredQuotes.OrderByDescending(q => q.CustomerName).ToList(),
            "product-asc" => filteredQuotes.OrderBy(q => q.ProductName).ToList(),
            "product-desc" => filteredQuotes.OrderByDescending(q => q.ProductName).ToList(),
            "total-desc" => filteredQuotes.OrderByDescending(q => q.TotalPrice).ToList(),
            "total-asc" => filteredQuotes.OrderBy(q => q.TotalPrice).ToList(),
            "status-asc" => filteredQuotes.OrderBy(q => q.Status).ToList(),
            "status-desc" => filteredQuotes.OrderByDescending(q => q.Status).ToList(),
            _ => filteredQuotes.OrderByDescending(q => q.CreatedDate).ToList()
        };
    }

    private void ClearSearch()
    {
        searchTerm = "";
        FilterQuotes();
    }

    private void ToggleAdvancedFilters()
    {
        showAdvancedFilters = !showAdvancedFilters;
    }

    private void ClearAllFilters()
    {
        filterCustomer = "";
        filterProduct = "";
        filterStatus = "";
        dateRangeFilter = "all";
        customStartDate = null;
        customEndDate = null;
        minPrice = null;
        maxPrice = null;
        minQuantity = null;
        maxQuantity = null;
        FilterQuotes();
    }

    private void ApplyFilters()
    {
        FilterQuotes();
    }

    private bool HasActiveFilters()
    {
        return !string.IsNullOrWhiteSpace(filterCustomer) ||
               !string.IsNullOrWhiteSpace(filterProduct) ||
               !string.IsNullOrWhiteSpace(filterStatus) ||
               dateRangeFilter != "all" ||
               minPrice.HasValue ||
               maxPrice.HasValue ||
               minQuantity.HasValue ||
               maxQuantity.HasValue;
    }

    private List<string> GetUniqueCustomers()
    {
        return quotes.Select(q => q.CustomerName).Distinct().OrderBy(c => c).ToList();
    }

    private List<string> GetUniqueProducts()
    {
        return quotes.Select(q => q.ProductName).Distinct().OrderBy(p => p).ToList();
    }

    private void BeginEdit(Quote quote)
    {
        editingId = quote.Id;
        draft = new Quote
            {
                Id = quote.Id,
                CustomerName = quote.CustomerName,
                ProductName = quote.ProductName,
                UnitPrice = quote.UnitPrice,
                Quantity = quote.Quantity,
                CreatedDate = quote.CreatedDate,
                Status = quote.Status,
                Comments = quote.Comments
            };
    }

    private void CancelEdit()
    {
        //cancel = null
        editingId = null;
        draft = null;
    }

    private void SaveEdit()
    {
        if (editingId is null || draft is null) return;

        // Validate numeric fields
        if (!IsValidNumericFields())
        {
            return; // Don't save if validation fails
        }

        // Persist changes using the service
        QuoteService.UpdateQuote(draft);
        
        // Refresh the local quotes list to reflect changes
        quotes = QuoteService.GetAllQuotes();
        FilterQuotes();

        CancelEdit();
    }

    private bool IsValidNumericFields()
    {
        if (draft == null) return false;

        // Check if UnitPrice is valid (greater than 0)
        if (draft.UnitPrice <= 0)
        {
            return false;
        }

        // Check if Quantity is valid (greater than 0 and whole number)
        if (draft.Quantity <= 0 || draft.Quantity % 1 != 0)
        {
            return false;
        }

        return true;
    }

    private bool IsUnitPriceValid()
    {
        return draft != null && draft.UnitPrice > 0;
    }

    private bool IsQuantityValid()
    {
        return draft != null && draft.Quantity > 0 && draft.Quantity % 1 == 0;
    }

    private bool IsFormValid()
    {
        return IsUnitPriceValid() && IsQuantityValid() && IsStringFieldsValid();
    }

    private bool IsCustomerNameValid()
    {
        return draft != null && !string.IsNullOrWhiteSpace(draft.CustomerName);
    }

    private bool IsProductNameValid()
    {
        return draft != null && !string.IsNullOrWhiteSpace(draft.ProductName);
    }

    private bool IsStringFieldsValid()
    {
        return IsCustomerNameValid() && IsProductNameValid();
    }

    private async Task ConfirmDelete(int id, string customerName)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to delete the quote for {customerName}? This action cannot be undone.");
        
        if (confirmed)
        {
            DeleteQuote(id);
        }
    }

    private void DeleteQuote(int id)
    {
        // Delete from service
        QuoteService.DeleteQuote(id);
        
        // Refresh the local quotes list to reflect changes
        quotes = QuoteService.GetAllQuotes();
        FilterQuotes();
        
        // If we were editing this quote, cancel edit mode
        if (editingId == id)
        {
            CancelEdit();
        }
    }

    private void BeginAddNew()
    {
        isAddingNew = true;
        newQuote = new Quote
        {
            CustomerName = "",
            ProductName = "",
            UnitPrice = 0,
            Quantity = 0,
            Status = "Draft",
            Comments = ""
        };
    }

    private void CancelAddNew()
    {
        isAddingNew = false;
        newQuote = null;
    }

    private void SaveNewQuote()
    {
        if (newQuote == null || !IsNewFormValid()) return;

        QuoteService.AddQuote(newQuote);
        quotes = QuoteService.GetAllQuotes();
        FilterQuotes();
        CancelAddNew();
    }

    // Validation methods for new quote form
    private bool IsNewCustomerNameValid()
    {
        return newQuote != null && !string.IsNullOrWhiteSpace(newQuote.CustomerName);
    }

    private bool IsNewProductNameValid()
    {
        return newQuote != null && !string.IsNullOrWhiteSpace(newQuote.ProductName);
    }

    private bool IsNewUnitPriceValid()
    {
        return newQuote != null && newQuote.UnitPrice > 0;
    }

    private bool IsNewQuantityValid()
    {
        return newQuote != null && newQuote.Quantity > 0 && newQuote.Quantity % 1 == 0;
    }

    private bool IsNewFormValid()
    {
        return IsNewCustomerNameValid() && IsNewProductNameValid() && 
               IsNewUnitPriceValid() && IsNewQuantityValid();
    }
}