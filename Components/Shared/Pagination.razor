@using TestApp.Models
@typeparam T

<div class="d-flex justify-content-between align-items-center">
    <div class="d-flex align-items-center">
        <span class="text-muted me-3">
            Showing @Model.StartIndex to @Model.EndIndex of @Model.TotalCount entries
        </span>
        
        @if (ShowPageSizeSelector)
        {
            <div class="d-flex align-items-center">
                <label class="form-label me-2 mb-0">Show:</label>
                <select class="form-select form-select-sm me-2" style="width: auto;" @bind="CurrentPageSize" @bind:event="onchange">
                    @foreach (var size in PageSizeOptions)
                    {
                        <option value="@size">@size</option>
                    }
                </select>
                <span class="text-muted">per page</span>
            </div>
        }
    </div>
    
    @if (Model.TotalPages > 1)
    {
        <nav aria-label="Pagination">
            <ul class="pagination pagination-sm mb-0">
                <!-- First Page -->
                <li class="page-item @(Model.PageNumber == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => OnPageChanged.InvokeAsync(1)" disabled="@(Model.PageNumber == 1)">
                        <i class="bi bi-chevron-double-left"></i>
                    </button>
                </li>
                
                <!-- Previous Page -->
                <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                    <button class="page-link" @onclick="() => OnPageChanged.InvokeAsync(Model.PageNumber - 1)" disabled="@(!Model.HasPreviousPage)">
                        <i class="bi bi-chevron-left"></i>
                    </button>
                </li>
                
                <!-- Page Numbers -->
                @{
                    var startPage = Math.Max(1, Model.PageNumber - 2);
                    var endPage = Math.Min(Model.TotalPages, Model.PageNumber + 2);
                    
                    if (startPage > 1)
                    {
                        <li class="page-item">
                            <button class="page-link" @onclick="() => OnPageChanged.InvokeAsync(1)">1</button>
                        </li>
                        @if (startPage > 2)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }
                    }
                    
                    @for (int i = startPage; i <= endPage; i++)
                    {
                        var pageNum = i;
                        <li class="page-item @(Model.PageNumber == pageNum ? "active" : "")">
                            <button class="page-link" @onclick="() => OnPageChanged.InvokeAsync(pageNum)">
                                @pageNum
                            </button>
                        </li>
                    }
                    
                    if (endPage < Model.TotalPages)
                    {
                        @if (endPage < Model.TotalPages - 1)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }
                        <li class="page-item">
                            <button class="page-link" @onclick="() => OnPageChanged.InvokeAsync(Model.TotalPages)">@Model.TotalPages</button>
                        </li>
                    }
                }
                
                <!-- Next Page -->
                <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                    <button class="page-link" @onclick="() => OnPageChanged.InvokeAsync(Model.PageNumber + 1)" disabled="@(!Model.HasNextPage)">
                        <i class="bi bi-chevron-right"></i>
                    </button>
                </li>
                
                <!-- Last Page -->
                <li class="page-item @(Model.PageNumber == Model.TotalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => OnPageChanged.InvokeAsync(Model.TotalPages)" disabled="@(Model.PageNumber == Model.TotalPages)">
                        <i class="bi bi-chevron-double-right"></i>
                    </button>
                </li>
            </ul>
        </nav>
    }
</div>

@code {
    [Parameter] public PagedResult<T> Model { get; set; } = default!;
    [Parameter] public EventCallback<int> OnPageChanged { get; set; }
    [Parameter] public bool ShowPageSizeSelector { get; set; } = true;
    [Parameter] public EventCallback<int> OnPageSizeChanged { get; set; }
    [Parameter] public int[] PageSizeOptions { get; set; } = { 10, 25, 50, 100 };
    
    private int _currentPageSize;
    
    private int CurrentPageSize
    {
        get => _currentPageSize > 0 ? _currentPageSize : Model.PageSize;
        set
        {
            if (_currentPageSize != value)
            {
                _currentPageSize = value;
                OnPageSizeChanged.InvokeAsync(value);
            }
        }
    }
}
